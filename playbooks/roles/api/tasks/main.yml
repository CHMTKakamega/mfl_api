---

- name: set up an account on the target machine for the current user
  user: 'name={{ lookup("env","USER") }} shell=/bin/bash groups=adm,sudo,plugdev append=yes state=present'

- name: set up the authorized key of this machine's user
  authorized_key: 'user={{ lookup("env","USER") }} key="{{ item }}"'
  with_file:
    - "{{ lookup('env','HOME') }}/.ssh/id_rsa.pub"

- name: copy the code to the target machine
  copy: 'src=.. dest=/opt/mfl_api owner={{ lookup("env","USER") }} group={{ lookup("env","USER") }} mode=0644 directory_mode=0644'

- name: update versions of common dependencies via pip before we make our venv
  pip: 'name={{item}} state=latest'
  with_items:
    - pip
    - distribute
    - virtualenv
    - virtualenvwrapper

- name: now install the dependencies that we need
  pip: chdir=/opt/mfl_api requirements=/opt/mfl_api/requirements.txt virtualenv=/opt/mfl_api_virtualenv

- name: run the Django migrations and collectstatic
  django_manage: "command={{item}} app_path=/opt/mfl_api virtualenv=/opt/mfl_api_virtualenv/"
  with_items:
    - migrate
    - collectstatic

- name: copy the supervisor configuration to its destination
  sudo: yes
  template: src=../templates/mfl_supervisor_conf.j2 dest=/etc/supervisor/conf.d/mfl_api.conf
  notify:
    - restart supervisor

- name: remove the default nginx site
  sudo: yes
  command: rm /etc/nginx/sites-enabled/default removes=/etc/nginx/sites-enabled/default

- name: copy the nginx configuration to its destination
  sudo: yes
  template: src=../templates/mfl_nginx.j2 dest=/etc/nginx/sites-enabled/mfl.conf
  notify:
    - restart nginx
